import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as r,a as t}from"./app-Bhs_aIEY.js";const n="/assets/AR_explained-CmR1jSym.png",i="/assets/NAR_explained-CnRDTR8y.png",o="/assets/PAR_explained-DIs3Z47l.png",s="/assets/table-3-CCLfRkgs.png",l="/assets/trade_off-BzL3IKuv.png",c="/assets/table-4-CC-3ttTB.png",p={},d=t('<h1 id="segment-level-vectorized-beam-search-based-on-partially-autoregressive-inference" tabindex="-1"><a class="header-anchor" href="#segment-level-vectorized-beam-search-based-on-partially-autoregressive-inference"><span>Segment-Level Vectorized Beam Search Based on Partially Autoregressive Inference</span></a></h1><p><a href="https://arxiv.org/abs/2309.14922" target="_blank" rel="noopener noreferrer">arXiv</a></p><h2 id="概要" tabindex="-1"><a class="header-anchor" href="#概要"><span>概要</span></a></h2><p>Autoregressive(AR)なデコード処理と、Non-Autoregressive(NAR)なデコード処理を組み合わせることで、それぞれが持つ弱みを消しあいながら、強みを生かしあうデコード処理を実現しました。 結果として、ARな処理と比較して精度をほとんど落とすことなく、大体12-13倍の高速化に成功しました。 このデコード処理のための特殊な学習は必要なく、学習済みのCTC/AttentionなARモデルをそのまま利用できることもメリットの一つです。 ESPnetに追加済みです。→ <a href="https://github.com/espnet/espnet/pull/5769" target="_blank" rel="noopener noreferrer">5760</a></p><h2 id="具体的な手法の説明など" tabindex="-1"><a class="header-anchor" href="#具体的な手法の説明など"><span>具体的な手法の説明など</span></a></h2><h3 id="arとは" tabindex="-1"><a class="header-anchor" href="#arとは"><span>ARとは?</span></a></h3><p>音声認識でメジャーなデコード処理として、前の文字列を推論してから次の文字を推論するAutoregressive(AR)な推論方法があります。</p><figure><img src="'+n+'" alt="Autoregressive decoding" tabindex="0" loading="lazy"><figcaption>Autoregressive decoding</figcaption></figure><p>ここでは、 <code>sea cucumber</code> という文字列を推定しています。 例えば２文字目の <code>e</code> は、最初の <code>s</code> が推定されてから、「１文字目は <code>s</code> だ」という情報を使って推論を実施します。 この手法は精度が良いという反面、最後の文字については前の推論が終わるまで待たなくてはならないので、全体の推論が終わるまで時間がかかってしまいます。</p><h3 id="narとは" tabindex="-1"><a class="header-anchor" href="#narとは"><span>NARとは？</span></a></h3><p>ARでは、全体の文字列の推論を実施するのに時間がかかるという欠点がありました。 そこで、すべての文字列を一気に推論してしまおうというのがNon-Autoregressiveな手法です。</p><figure><img src="'+i+'" alt="Non-Autoregressive decoding" tabindex="0" loading="lazy"><figcaption>Non-Autoregressive decoding</figcaption></figure><p>NARには様々な手法があり、それぞれに構造が異なるのですが、ここでは本研究で参考にした<a href="https://arxiv.org/abs/2005.08700" target="_blank" rel="noopener noreferrer">Mask-CTC</a>という手法を表示しています。 まず<code>CTC</code>モジュールで全体の文字列を一度に推論してから、間違っていそうな箇所をDecoderで修正します。</p><p>NARはARと比較して非常に高速ですが、ARとは違って推論するtokenの位置より前の情報を使えないため、ARより精度が低く、推論ミスが発生しやすいという欠点もあります。 また、Mask-CTCの場合、最初に<code>CTC</code>で予測する文字列の長さが間違っている場合、修正で長く/短くすることはできません。 例えば、赤字の <code>am</code> 部分について、もしも正解が <code>m</code> だけだった場合、そもそも文字数が違うので、Decoderで修正しても必ず推論ミスが発生します。</p><h3 id="今回提案するparとは" tabindex="-1"><a class="header-anchor" href="#今回提案するparとは"><span>今回提案するPARとは</span></a></h3><p>そこで今回提案したのは、<code>CTC</code>で推論した中で、間違っていそうな箇所のみARで推論するというものです。 一部だけARな手法でデコードするため、Partially Autoregressive (PAR) なデコードとしています。</p><figure><img src="'+o+'" alt="Partially Autoregressive decoding" tabindex="0" loading="lazy"><figcaption>Partially Autoregressive decoding</figcaption></figure><p>それぞれの間違っていそうな箇所（赤字箇所）を並列処理することで、実質的にARの繰り返し処理の回数を大幅に減らすことができます。 赤字の推論のために、それ以前の文字列をsegmentとして並列で推論を実施します。 つまり、独立した赤字部分の数だけsegmentが作成され、AR処理を同時に実施することで高速化を図ります。 そのため、segmentの数によらず、ARの繰り返し回数はsegmentが１個の場合と同じになります。 これが、今回の高速化に貢献した一番重要な部分になります。</p><p>なお、２つ目以降の赤字箇所では、必ずそれ以前に赤字箇所が含まれます。（例えば、 <code>am</code> を推定する時には、一つ目の赤字 <code>e</code> があります） これは、１つ目の赤字箇所の推論結果を待って２つ目の推論に移るべきではありますが、その場合はARと同様の推論速度に関する問題が発生してしまいます。 そこで、今回はCTCの結果が間違っていたとしても、そのまま利用することで並列処理できるようにしています。 実験では、CTCの結果をそのまま用いても精度が落ちないことがわかっています。</p><h2 id="実験結果" tabindex="-1"><a class="header-anchor" href="#実験結果"><span>実験結果</span></a></h2><h3 id="ar-vs-par" tabindex="-1"><a class="header-anchor" href="#ar-vs-par"><span>AR vs PAR</span></a></h3><p>精度はWord Error Rate (WER, Errorの列)、推論速度はReal Time Factor (RTFの列)に記載しています。 どちらも数字が小さいほうが精度が良いことを表しています。</p><figure><img src="'+s+'" alt="Table 3" tabindex="0" loading="lazy"><figcaption>Table 3</figcaption></figure><p>PARでは、ほとんど精度を落とすことなく、推論速度を高速にできていることがわかります。 なお、この高速化は並列処理によるものなので、推論する音声が短いと（ARでの繰り返し回数が少ないと）PARでの高速化効果は小さくなります。 逆に長い音声の場合はその効果は絶大で、今回の実験では最大89.7倍の高速化を確認しました。</p><h3 id="trade-off" tabindex="-1"><a class="header-anchor" href="#trade-off"><span>Trade-off</span></a></h3><p>以下に精度と推論速度についての表を作成しました。 それぞれ、beam searchのパラメータである beam sizeを1から20まで変化させて精度と速度を計測しています。 (beam sizeが小さいと、精度は悪化するが早くなります。)</p><figure><img src="'+l+'" alt="Figure 4" tabindex="0" loading="lazy"><figcaption>Figure 4</figcaption></figure><p>ARと比較すると、PARの線はLibrispeechの100hデータセット、960hデータセットのどちらで学習した場合も左に寄っていて、Trade-offが改善していることがわかります。</p><h3 id="nar-vs-par" tabindex="-1"><a class="header-anchor" href="#nar-vs-par"><span>NAR vs PAR</span></a></h3><p>以下はLibrispeech 100hデータセットで学習/評価した結果です。</p><figure><img src="'+c+'" alt="Table 4" tabindex="0" loading="lazy"><figcaption>Table 4</figcaption></figure><p>推論速度はNARに及んでいないですが、精度はNARを大きく上回っており、ARと同等レベルの精度が出ていることがわかります。</p><h2 id="limitation" tabindex="-1"><a class="header-anchor" href="#limitation"><span>Limitation</span></a></h2><h3 id="精度について" tabindex="-1"><a class="header-anchor" href="#精度について"><span>精度について</span></a></h3><p>PARの部分でも記載しましたが、特に２つ目以降の赤字箇所では、AR推論に用いる「前の部分」が間違っている可能性が十分にあります。 そのため、これが影響して精度が悪化する可能性があります。</p><h3 id="メモリ使用量について" tabindex="-1"><a class="header-anchor" href="#メモリ使用量について"><span>メモリ使用量について</span></a></h3><p>並列処理する関係上、一度に使うメモリ使用量は増加します。 しかしこれについては、推論時のメモリの活用方法について実装を改善することで、メモリ使用量についての問題は解決できました。 これはESPnetでの実装に際して修正済みとなっています。</p><h2 id="裏話" tabindex="-1"><a class="header-anchor" href="#裏話"><span>裏話</span></a></h2><p>この論文を書き始めた一番最初のころ</p><p>ESPnet-ONNXの実装をNARに広げてみようとしていた際に、Mask-CTCの詳細を実装レベルで確認していました。 この時に、なんとなく「NARとARと組み合わせれば、二つのいいとこどりができるのでは？」と思い、論文を調べ始めました。 同様の発想ならMask-CTCを引用しているだろうと思い、Mask-CTCを引用している論文のリストをすべて探しましたが、それらしいものが見当たりませんでした。</p><p>そこで、最初は試しに<a href="https://arxiv.org/pdf/2103.10360" target="_blank" rel="noopener noreferrer">GLM</a>を参考に、Mask箇所の前後も考慮してARで推論できるモデルを学習してみました。 Libriseechのテキストで学習してみたのですが、精度がどうしても上がりませんでした。 この時は自前のRTX-2080ti１枚しかなく、１回の学習もだいぶ時間がかかっていたこともあって、大規模な計算機が使えるようになってから試せばいいやというマインドでいったんあきらめました。 （この時大学は申し込んですらいませんでしたが、どこかの大学院にはいきたいと思っていました）</p><p>しかし散歩しているうちに、ARなデコードにおいて「あるk番目のtokenを推定するのに最低限必要なものは、学習済みのモデルと、<code>sos</code>トークンと、k番目という位置情報くらいでは？」という考えに至りました。 それならば、Mask-CTCのlow-confidentな部分を推定するのに必要なものは既にそろっていて、追加の学習は一切必要ないと考えました。</p><p>そこで、Mask-CTCのlow-confidentな箇所の手前からARなデコード処理をしてみたところ、うまくいきそうだということがわかりました。 渡邉先生とはGLMあたりから少しずつ会話させていただいていましたが、このAR処理がちょっと早くなった時に、「AR処理を並列化できればいいね」というような指摘をもらっていました。 そこでARの並列化に合わせて、ESPnetではCPU処理になっていたVectorized Beam searchの処理もついでにGPUで処理できるように実装してみたところ、今回のような実験結果になりました。</p><p>IBMで働きながらの実験や執筆だったので大変ではありましたが、ESPnet-ONNXの反省を生かして実装にいろいろ仕込んでおいたことが功を奏し、締め切りに追われることなく割と快適にかけたと思っています。 ASRUの結果を受けて、今回の論文ではRelated worksの部分が圧倒的に足りないことがわかったので、次回自分が書く際はRelated worksをもっとしっかり書けるようにしたいですね。</p>',44),g=[d];function h(m,f){return r(),a("div",null,g)}const R=e(p,[["render",h],["__file","partially_autoregressive_inference.html.vue"]]),v=JSON.parse('{"path":"/ja/publications/partially_autoregressive_inference.html","title":"Segment-Level Vectorized Beam Search Based on Partially Autoregressive Inference","lang":"ja-JP","frontmatter":{"icon":"pen-fancy","category":["publications"],"tag":["inference","decode","AR","NAR","PAR"],"description":"Segment-Level Vectorized Beam Search Based on Partially Autoregressive Inference arXiv 概要 Autoregressive(AR)なデコード処理と、Non-Autoregressive(NAR)なデコード処理を組み合わせることで、それぞれが持つ弱みを消しあいながら、強...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://Masao-Someki.github.io/publications/partially_autoregressive_inference.html"}],["meta",{"property":"og:url","content":"https://Masao-Someki.github.io/ja/publications/partially_autoregressive_inference.html"}],["meta",{"property":"og:site_name","content":"Masaoのブログ"}],["meta",{"property":"og:title","content":"Segment-Level Vectorized Beam Search Based on Partially Autoregressive Inference"}],["meta",{"property":"og:description","content":"Segment-Level Vectorized Beam Search Based on Partially Autoregressive Inference arXiv 概要 Autoregressive(AR)なデコード処理と、Non-Autoregressive(NAR)なデコード処理を組み合わせることで、それぞれが持つ弱みを消しあいながら、強..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ja-JP"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-11T17:48:35.000Z"}],["meta",{"property":"article:author","content":"Masao Someki"}],["meta",{"property":"article:tag","content":"inference"}],["meta",{"property":"article:tag","content":"decode"}],["meta",{"property":"article:tag","content":"AR"}],["meta",{"property":"article:tag","content":"NAR"}],["meta",{"property":"article:tag","content":"PAR"}],["meta",{"property":"article:modified_time","content":"2024-08-11T17:48:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Segment-Level Vectorized Beam Search Based on Partially Autoregressive Inference\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-11T17:48:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Masao Someki\\",\\"url\\":\\"https://Masao-Someki.github.io\\"}]}"]]},"headers":[{"level":2,"title":"概要","slug":"概要","link":"#概要","children":[]},{"level":2,"title":"具体的な手法の説明など","slug":"具体的な手法の説明など","link":"#具体的な手法の説明など","children":[{"level":3,"title":"ARとは?","slug":"arとは","link":"#arとは","children":[]},{"level":3,"title":"NARとは？","slug":"narとは","link":"#narとは","children":[]},{"level":3,"title":"今回提案するPARとは","slug":"今回提案するparとは","link":"#今回提案するparとは","children":[]}]},{"level":2,"title":"実験結果","slug":"実験結果","link":"#実験結果","children":[{"level":3,"title":"AR vs PAR","slug":"ar-vs-par","link":"#ar-vs-par","children":[]},{"level":3,"title":"Trade-off","slug":"trade-off","link":"#trade-off","children":[]},{"level":3,"title":"NAR vs PAR","slug":"nar-vs-par","link":"#nar-vs-par","children":[]}]},{"level":2,"title":"Limitation","slug":"limitation","link":"#limitation","children":[{"level":3,"title":"精度について","slug":"精度について","link":"#精度について","children":[]},{"level":3,"title":"メモリ使用量について","slug":"メモリ使用量について","link":"#メモリ使用量について","children":[]}]},{"level":2,"title":"裏話","slug":"裏話","link":"#裏話","children":[]}],"git":{"createdTime":1723351165000,"updatedTime":1723398515000,"contributors":[{"name":"Masao-Someki","email":"masao.someki@gmail.com","commits":2}]},"readingTime":{"minutes":3.47,"words":1041},"filePathRelative":"ja/publications/partially_autoregressive_inference.md","localizedDate":"2024年8月11日","excerpt":"\\n<p><a href=\\"https://arxiv.org/abs/2309.14922\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">arXiv</a></p>\\n<h2>概要</h2>\\n<p>Autoregressive(AR)なデコード処理と、Non-Autoregressive(NAR)なデコード処理を組み合わせることで、それぞれが持つ弱みを消しあいながら、強みを生かしあうデコード処理を実現しました。\\n結果として、ARな処理と比較して精度をほとんど落とすことなく、大体12-13倍の高速化に成功しました。\\nこのデコード処理のための特殊な学習は必要なく、学習済みのCTC/AttentionなARモデルをそのまま利用できることもメリットの一つです。\\nESPnetに追加済みです。→ <a href=\\"https://github.com/espnet/espnet/pull/5769\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">5760</a></p>","autoDesc":true}');export{R as comp,v as data};

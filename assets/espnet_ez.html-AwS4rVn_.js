import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as t,a}from"./app-CEeLUe0Z.js";const i="/assets/code_lines-CiTwunPV.png",r="/assets/user_feedback-Ch7fSZ1j.png",s="/assets/ASR_result-DZfhsYlw.png",o={},p=a('<h1 id="espnet-ez-python-only-espnet-for-easy-fine-tuning-and-integration" tabindex="-1"><a class="header-anchor" href="#espnet-ez-python-only-espnet-for-easy-fine-tuning-and-integration"><span>ESPnet-EZ: Python-Only ESPnet for Easy Fine-Tuning and Integration</span></a></h1><p>SLT2024で発表します。 <a href="https://arxiv.org/abs/2409.09506v1" target="_blank" rel="noopener noreferrer">arXiv</a></p><h2 id="概要" tabindex="-1"><a class="header-anchor" href="#概要"><span>概要</span></a></h2><p>ESPnetは実験の再現を行ったり、クラスター環境で実験を行うには非常に優れたツールですが、shell scriptの複雑さや種類の多さから、入門するための敷居がとても高いという問題がありました。 この問題に対応するため、ESPnetのレシピの多さや機能性を損なわずに、Pythonicな実装を可能にしました。 これによって、ESPnet入門の敷居がかなり下がったように感じています。（体感）</p><h2 id="今までのespnet" tabindex="-1"><a class="header-anchor" href="#今までのespnet"><span>今までのESPnet</span></a></h2><p>今までは、新しいデータセットに対応するためにはrecipeを作成する必要がありました。 recipeがあることで、だれでも同じようにdata preparationやpreprocessingができるので、実験の再現性という点において非常に大きなメリットがありました。 しかし、だからこその様々な決まり事がありました。 例えばデータの格納方法についての制約があるので、近年発展しているHuggingfaceのdatasetやLhotseといった優れたライブラリとの連携がうまくできないという問題がありました。</p><p>その他にも、膨大なshell scriptや複雑なscriptは、beginnerからすると相当とっつきにくいものだと思います。 私自身、初めてESPnetを触ったときはshell scriptに明るくなかったので苦労した覚えがあります。</p><h2 id="espnet-ez" tabindex="-1"><a class="header-anchor" href="#espnet-ez"><span>ESPnet-EZ</span></a></h2><p>EZでは、ESPnetの機能をPythonのみで直感的に触れるようにしようというコンセプトで作りました。 特に、「１個１個のちょっとした実験を簡単に回せるようにしておきたい」という思いが強く、１つの実験を１つのファイルで完結するようにESPnetのラッパークラスを作成していきました。 もちろんその他のライブラリに優れたものはたくさんありますが、ESPnet-EZには以下のような強みがあります。</p><ul><li>Research orientedなツールなので、かなりの数のTaskをサポートしているし、これからも増え続けていく。</li><li>超大量のレシピや、その中で研究された設定をそのまま使って実験できる。</li><li>（多少 shell scriptを触りますが）実際に実験で利用したdata preparationを実行して、そのうえでPythonicなファイルを書いて実験できる。</li></ul><p>ESPnet-EZでは、従来のESPnetではできなかった外部ライブラリとの連携もスムーズにできるようになっています。 そのため、Lhotseを用いて処理したデータをESPnetのモデルで学習することもできますし、大量のデータをshardに保存しておいて、webdatasetを使って読み込んで使っていくこともできます。</p><p>また、ESPnet-EZでは、モデル定義の自由度も上げています。 yamlファイルで設定するものだけでなく、ユーザが自由にモデルを定義してTrainerに渡せるようになっています。 例えばwebdatasetを用いてAmazon S3に保存したデータをロードし、学習済みOWSMのEncoderを計算 → 出力結果をHuggingface hubの学習済みGPT-2に渡し、音声翻訳モデルを学習するというような複雑なこともできます。</p><p>この機能を付けたことで、ESPnet-EZではモデルをscratchから学習させるツールというよりは、Fine-tuning等を行うツールとしての側面が強くなりました。 従来のESPnetでは、学習済みモデルに対して何か特殊なモジュールを追加したり、処理内容に変更を加えることはできませんでしたので、大きな変更点といってもよいかもしれません。</p><h2 id="比較" tabindex="-1"><a class="header-anchor" href="#比較"><span>比較</span></a></h2><h3 id="コードを書く量について" tabindex="-1"><a class="header-anchor" href="#コードを書く量について"><span>コードを書く量について</span></a></h3><p>新しいデータセットに対応するコードを書いて学習するのに必要な行数の比較です <img src="'+i+'" alt="" loading="lazy"></p><h3 id="ユーザからの意見" tabindex="-1"><a class="header-anchor" href="#ユーザからの意見"><span>ユーザからの意見</span></a></h3><p>実際に学生の方に意見を聞いてみました。 左側はESPnetに対してESPnet-EZについての意見、右側はESPnet-EZに対してESPnetの意見です。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="fine-tuningの結果比較" tabindex="-1"><a class="header-anchor" href="#fine-tuningの結果比較"><span>Fine-tuningの結果比較</span></a></h3><p>ここでは、文字起こしタスク（Automatic Speech Recognition, ASR）の結果を紹介します。その他のタスクについてはpaperを参照してください。</p><p><a href="espnet/owsm_v3.1_ebf_base">OWSM-v3.1-base</a>モデルを<a href="https://www.openslr.org/12" target="_blank" rel="noopener noreferrer">Librispeech-100h</a>データセットでFine-tuningしました。 学習データには含まれていますが、LhotseやLoRAを用いてFine-tuneすることで若干の精度向上ができました。 指標はWord Error Eate (WER) で、正解と文字起こし結果の一致率を[%]で表します。</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="裏話" tabindex="-1"><a class="header-anchor" href="#裏話"><span>裏話</span></a></h2><p>CMUに入学した後、実験をたくさん回すのにshell scriptが複雑だと若干使いにくいし、laptopでデバッグのテスト実行をしたりするのも大変だなぁと思っていました。 そこで、チョチョッと書いてパッと実行できるようにしようと思って、ESPnetのラッパークラスとしてESPnet-EZを準備しました。</p><p>これは本当に単純なラッパークラスなので、正直なところ論文にするほどの新規性はないと思っていました。 ですが、Watanabe教授とKwangheeのおかげで素晴らしいpaperに仕上がりました。 特にユーザからの意見を載せようとか、コードが減った図を載せようとか、一人では思いつかなかったアイディアが実際に論文になっていく様はなかなか感動しました。</p><p>また、このプロジェクトではいろいろな方に実装を手伝ってもらったり、実験を分担したりなど、多くの方に協力してもらいました。 彼らの協力がなければここまでのものは絶対完成できなかったと思うので本当に感謝ですね。</p>',27),l=[p];function c(h,d){return t(),n("div",null,l)}const m=e(o,[["render",c],["__file","espnet_ez.html.vue"]]),S=JSON.parse('{"path":"/ja/publications/espnet_ez.html","title":"ESPnet-EZ: Python-Only ESPnet for Easy Fine-Tuning and Integration","lang":"ja-JP","frontmatter":{"icon":"pen-fancy","category":["publications"],"tag":["ESPnet","experiment"],"description":"ESPnet-EZ: Python-Only ESPnet for Easy Fine-Tuning and Integration SLT2024で発表します。 arXiv 概要 ESPnetは実験の再現を行ったり、クラスター環境で実験を行うには非常に優れたツールですが、shell scriptの複雑さや種類の多さから、入門するための敷居がとても高い...","head":[["meta",{"property":"og:url","content":"https://Masao-Someki.github.io/ja/publications/espnet_ez.html"}],["meta",{"property":"og:site_name","content":"Masaoのブログ"}],["meta",{"property":"og:title","content":"ESPnet-EZ: Python-Only ESPnet for Easy Fine-Tuning and Integration"}],["meta",{"property":"og:description","content":"ESPnet-EZ: Python-Only ESPnet for Easy Fine-Tuning and Integration SLT2024で発表します。 arXiv 概要 ESPnetは実験の再現を行ったり、クラスター環境で実験を行うには非常に優れたツールですが、shell scriptの複雑さや種類の多さから、入門するための敷居がとても高い..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ja-JP"}],["meta",{"property":"og:updated_time","content":"2024-09-20T03:34:54.000Z"}],["meta",{"property":"article:author","content":"Masao Someki"}],["meta",{"property":"article:tag","content":"ESPnet"}],["meta",{"property":"article:tag","content":"experiment"}],["meta",{"property":"article:modified_time","content":"2024-09-20T03:34:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ESPnet-EZ: Python-Only ESPnet for Easy Fine-Tuning and Integration\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-20T03:34:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Masao Someki\\",\\"url\\":\\"https://Masao-Someki.github.io\\"}]}"]]},"headers":[{"level":2,"title":"概要","slug":"概要","link":"#概要","children":[]},{"level":2,"title":"今までのESPnet","slug":"今までのespnet","link":"#今までのespnet","children":[]},{"level":2,"title":"ESPnet-EZ","slug":"espnet-ez","link":"#espnet-ez","children":[]},{"level":2,"title":"比較","slug":"比較","link":"#比較","children":[{"level":3,"title":"コードを書く量について","slug":"コードを書く量について","link":"#コードを書く量について","children":[]},{"level":3,"title":"ユーザからの意見","slug":"ユーザからの意見","link":"#ユーザからの意見","children":[]},{"level":3,"title":"Fine-tuningの結果比較","slug":"fine-tuningの結果比較","link":"#fine-tuningの結果比較","children":[]}]},{"level":2,"title":"裏話","slug":"裏話","link":"#裏話","children":[]}],"git":{"createdTime":1726803294000,"updatedTime":1726803294000,"contributors":[{"name":"Masao-Someki","email":"masao.someki@gmail.com","commits":1}]},"readingTime":{"minutes":1.79,"words":538},"filePathRelative":"ja/publications/espnet_ez.md","localizedDate":"2024年9月20日","excerpt":"\\n<p>SLT2024で発表します。\\n<a href=\\"https://arxiv.org/abs/2409.09506v1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">arXiv</a></p>\\n<h2>概要</h2>\\n<p>ESPnetは実験の再現を行ったり、クラスター環境で実験を行うには非常に優れたツールですが、shell scriptの複雑さや種類の多さから、入門するための敷居がとても高いという問題がありました。\\nこの問題に対応するため、ESPnetのレシピの多さや機能性を損なわずに、Pythonicな実装を可能にしました。\\nこれによって、ESPnet入門の敷居がかなり下がったように感じています。（体感）</p>","autoDesc":true}');export{m as comp,S as data};
